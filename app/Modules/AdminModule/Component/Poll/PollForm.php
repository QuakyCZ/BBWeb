<?php

namespace App\Modules\AdminModule\Component\Poll;


use App\Component\BaseComponent;
use App\Enum\EFlashMessageType;
use App\Facade\PollFacade;
use App\Repository\Primary\PollOptionRepository;
use App\Repository\Primary\PollParticipantRepository;
use App\Repository\Primary\PollRepository;
use App\Repository\Primary\PollRoleRepository;
use App\Repository\Primary\RoleRepository;
use App\Repository\Primary\UserRepository;
use Contributte\FormMultiplier\Multiplier;
use Nette\Application\AbortException;
use Nette\Application\BadRequestException;
use Nette\Application\UI\Form;
use Nette\Database\Table\ActiveRow;
use Nette\Forms\Container;
use Nette\Utils\ArrayHash;
use Tracy\Debugger;
use Tracy\ILogger;

class PollForm extends BaseComponent
{

    /**
     * @param int|null $id
     * @param PollFacade $pollFacade
     * @param PollRepository $pollRepository
     * @param UserRepository $userRepository
     * @param RoleRepository $roleRepository
     */
    public function __construct(
        protected ?int $id,
        protected PollFacade $pollFacade,
        protected PollRepository $pollRepository,
        protected PollOptionRepository $pollOptionRepository,
        protected PollParticipantRepository $pollParticipantRepository,
        protected PollRoleRepository $pollRoleRepository,
        protected UserRepository $userRepository,
        protected RoleRepository $roleRepository,
    )
    {
    }

    /**
     * @throws BadRequestException
     */
    public function render(): void
    {
        if ($this->id !== null) {
            $poll = $this->pollRepository->findBy([
                PollRepository::COLUMN_ID => $this->id
            ])->fetch();
            if ($poll === null) {
                throw new BadRequestException();
            }

            $defaults = $poll->toArray();
            $defaults['options'] = [];
            $options = $this->pollOptionRepository->findBy([
                PollOptionRepository::COLUMN_POLL_ID => $this->id
            ]);

            /** @var ActiveRow $option */
            foreach ($options as $option) {
                $defaults['options'][$option[PollOptionRepository::COLUMN_ID]]['text'] = $option[PollOptionRepository::COLUMN_TEXT];
            }

            $defaults['active'] = str_replace('-','/', $poll[PollRepository::COLUMN_FROM]) . ' - ' . str_replace('-','/', $poll[PollRepository::COLUMN_TO]);

            if ($poll[PollRepository::COLUMN_IS_PRIVATE]) {
                $defaults['user_ids'] = $this->pollParticipantRepository->findBy([
                    PollParticipantRepository::COLUMN_POLL_ID => $this->id
                ])->fetchPairs('user_id', 'user_id');

                $defaults['role_ids'] = $this->pollRoleRepository->findBy([
                    PollRoleRepository::COLUMN_POLL_ID => $this->id
                ])->fetchPairs('role_id', 'role_id');
            }

            bdump($defaults);

            $form = $this['form'];
            $form->setDefaults($defaults);
        }
        parent::render(); // TODO: Change the autogenerated stub
    }


    /**
     * @return Form
     */
    public function createComponentForm(): Form
    {
        $form = new Form();
        $form->getElementPrototype()->class("ajax");
        $form->addTextArea(PollRepository::COLUMN_QUESTION, 'Otázka', null, 2);

        /** @var Multiplier $multiplier */
        $multiplier = $form->addMultiplier('options', function(Container $container) {
            $container->addText(PollOptionRepository::COLUMN_TEXT, 'Možnost')
                ->setRequired('Toto pole je povinné');
        }, 2);

        $multiplier->addCreateButton('Přidat možnost')
            ->addClass('btn btn-success');

        $multiplier->addRemoveButton('Odebrat')
            ->addClass('btn btn-danger');

        $from = (new \DateTime())->format('Y/m/d H:i');
        $to = (new \DateTime())->add(new \DateInterval('PT1H'))->format('Y/m/d H:i');

        $form->addText('active', 'Hlasování od/do')
            ->setDefaultValue($from . ' - ' . $to);

        $privateCheckbox = $form->addCheckbox(PollRepository::COLUMN_IS_PRIVATE, 'Soukromé');

        $privateCheckbox->addCondition(Form::FILLED)
            ->toggle('participants-container');

        $userIds = $form->addMultiSelect('user_ids', 'Účastníci', $this->userRepository->fetchForChoiceControl());
        $roleIds = $form->addMultiSelect('role_ids', 'Role', $this->roleRepository->getDataForSelect());

        $userIds->addConditionOn($privateCheckbox, Form::FILLED)
            ->addConditionOn($roleIds, Form::BLANK)
            ->setRequired();

        $roleIds->addConditionOn($privateCheckbox, Form::FILLED)
            ->addConditionOn($userIds, Form::BLANK)
            ->setRequired();

        $form->addSubmit('save', 'Vytvořit');

        $form->onAnchor[] = [$this, 'anchorForm'];
        $form->onSuccess[] = [$this, 'saveForm'];

        return $form;
    }


    /**
     * @param Form $form
     * @return void
     */
    public function anchorForm(Form $form): void {
        if ($this->presenter->isAjax()) {
            $this->redrawControl();
        }
    }


    /**
     * @param Form $form
     * @param ArrayHash $values
     * @return void
     * @throws AbortException
     */
    public function saveForm(Form $form, ArrayHash $values): void {
        try
        {
                $this->pollFacade->savePoll($values, $this->presenter->user->id, $this->id);
            $this->presenter->flashMessage('Hlasování bylo vytvořeno', EFlashMessageType::SUCCESS);
            $this->presenter->redirect(':Admin:Poll:default');
        }
        catch (BadRequestException $exception) {
            $form->addError($exception->getMessage());
        }
        catch (\PDOException $exception)
        {
            Debugger::log($exception, ILogger::EXCEPTION);
            $form->addError('Při zpracování požadavku nastala neznámá chyba.');
        }
    }
}