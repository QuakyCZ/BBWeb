<?php

namespace App\Modules\ClientModule\Component\Poll;

use App\Component\BaseComponent;
use App\Facade\PollFacade;
use App\Repository\Primary\PollOptionRepository;
use App\Repository\Primary\PollParticipantRepository;
use App\Repository\Primary\PollRepository;
use Nette\Application\BadRequestException;
use Nette\Application\UI\Form;
use Nette\Database\Table\ActiveRow;
use Nette\Utils\ArrayHash;
use Tracy\Debugger;

class PollVoteForm extends BaseComponent
{
    public function __construct(
        private ?int $id,
        private PollFacade $pollFacade,
        private PollRepository $pollRepository
    )
    {
    }

    public function render(): void
    {
        $this->template->poll = $this->pollFacade->getPoll($this->id);
        parent::render(); // TODO: Change the autogenerated stub
    }

    public function createComponentForm(): Form {
        $form = new Form;
        $poll = $this->pollRepository->getRow($this->id);
        if ($poll === null) {
            throw new BadRequestException();
        }

        $optionRows = $poll->related(PollOptionRepository::TABLE_NAME)->fetchAll();
        $options = [];
        foreach ($optionRows as $optionRow) {
            $options[$optionRow[PollOptionRepository::COLUMN_ID]] = $optionRow[PollOptionRepository::COLUMN_TEXT];
        }

        $form->addRadioList(PollParticipantRepository::COLUMN_POLL_OPTION_ID, 'Odpověď', $options);

        $form->addSubmit('save', 'Uložit');
        $form->onSuccess[] = [$this, 'saveForm'];



        return $form;
    }

    public function saveForm(Form $form, ArrayHash $values): void {
        if (!is_int($values[PollParticipantRepository::COLUMN_POLL_OPTION_ID])) {
            $form->addError('Neplatná odpověď.');
            return;
        }
        try {
            $this->pollFacade->vote(
                $this->presenter->user->id,
                $values[PollParticipantRepository::COLUMN_POLL_OPTION_ID]
            );
            $this->presenter->redirect('this');
        } catch (BadRequestException $exception) {
            $form->addError($exception->getMessage());
        } catch (\PDOException $exception) {
            Debugger::log($exception);
            $form->addError('Při zpracování požadavku nastala neznámá chyba.');
        }
    }

}

interface IPollVoteFormFactory
{
    /**
     * @param int|null $id
     * @return PollVoteForm
     */
    public function create(?int $id = null): PollVoteForm;
}